import fs from 'fs';
import path from 'path';
import crypto from 'crypto';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const assetsDir = path.join(__dirname, '..', 'src', 'assets');
const metadataPath = path.join(assetsDir, 'images-metadata.json');

function hashFile(filePath) {
    try {
        const buf = fs.readFileSync(filePath);
        return crypto.createHash('md5').update(buf).digest('hex');
    } catch {
        return null;
    }
}

function safeUnlink(filePath) {
    try {
        if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath);
            return true;
        }
    } catch { }
    return false;
}

function isTechnicalCategory(cat) {
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Flexbe/—Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–ª–æ—ë–≤
    return ['layer', 'component-image__image', 'flexbe-card', 'is-view'].includes(cat);
}

function shouldRemoveByHeuristics(item) {
    // 1) –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã (—Ç–µ—Ö –∏–∫–æ–Ω–∫–∏/–ø–∏–∫—Å–µ–ª–∏)
    if (item.size !== undefined && item.size < 1024) return true; // < 1KB
    if ((item.width || 0) <= 16 && (item.height || 0) <= 16) return true;

    // 2) –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–æ–Ω–æ–≤—ã–µ/—Ñ–æ–Ω–æ–ø–æ–¥–æ–±–Ω—ã–µ
    const area = (item.width || 0) * (item.height || 0);
    if (item.element === 'background' && area < 200 * 120) return true;

    // 3) SVG –∏–∫–æ–Ω–∫–∏ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
    if (item.extension === 'svg' && isTechnicalCategory(item.category)) return true;

    return false;
}

async function main() {
    if (!fs.existsSync(metadataPath)) {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', metadataPath);
        process.exit(1);
    }

    const metaRaw = fs.readFileSync(metadataPath, 'utf8');
    const metadata = JSON.parse(metaRaw);

    const images = metadata.images || [];

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É URL: –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—ã–π –∫—Ä—É–ø–Ω—ã–π (–ø–æ —Ä–∞–∑–º–µ—Ä—É)
    const byUrl = new Map();
    for (const img of images) {
        const key = img.originalUrl || `${img.filePath}`;
        if (!byUrl.has(key)) byUrl.set(key, []);
        byUrl.get(key).push(img);
    }

    const keepSet = new Set();
    const deleteSet = new Set();

    // 1) –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π size)
    for (const [key, list] of byUrl.entries()) {
        if (list.length === 1) {
            keepSet.add(list[0].filePath);
            continue;
        }
        const sorted = [...list].sort((a, b) => (b.size || 0) - (a.size || 0));
        // keep the largest
        keepSet.add(sorted[0].filePath);
        // delete rest
        for (let i = 1; i < sorted.length; i++) deleteSet.add(sorted[i].filePath);
    }

    // 2) –£–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º—É—Å–æ—Ä –ø–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞–º
    for (const img of images) {
        if (deleteSet.has(img.filePath)) continue;
        if (shouldRemoveByHeuristics(img)) {
            deleteSet.add(img.filePath);
        }
    }

    // 3) –ï—Å–ª–∏ –≤ –ø–∞–ø–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è (flexbe/layer etc.), –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã, —É–¥–∞–ª—è–µ–º –ø—Ä–æ—á–µ–µ –∫–∞–∫ –¥—É–±–ª–∏/–º–µ–ª–∫–∏–µ
    const byCategory = new Map();
    for (const img of images) {
        if (!byCategory.has(img.category)) byCategory.set(img.category, []);
        byCategory.get(img.category).push(img);
    }

    for (const [cat, list] of byCategory.entries()) {
        if (!isTechnicalCategory(cat)) continue;
        // –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ø-5 –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–µ
        const sorted = [...list].sort((a, b) => (b.size || 0) - (a.size || 0));
        const keepTop = new Set(sorted.slice(0, 5).map(i => i.filePath));
        for (const img of list) {
            if (!keepTop.has(img.filePath)) deleteSet.add(img.filePath);
        }
    }

    // 4) –£–¥–∞–ª—è–µ–º —Ç–æ—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Ö—ç—à—É
    const byHash = new Map();
    for (const img of images) {
        if (deleteSet.has(img.filePath)) continue;
        const abs = path.join(assetsDir, img.filePath);
        const h = hashFile(abs);
        if (!h) continue;
        if (!byHash.has(h)) byHash.set(h, []);
        byHash.get(h).push(img);
    }
    for (const [h, list] of byHash.entries()) {
        if (list.length <= 1) continue;
        // –æ—Å—Ç–∞–≤–∏–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π
        const sorted = [...list].sort((a, b) => (b.size || 0) - (a.size || 0));
        for (let i = 1; i < sorted.length; i++) deleteSet.add(sorted[i].filePath);
        keepSet.add(sorted[0].filePath);
    }

    // –ò—Ç–æ–≥–æ–≤—ã–µ —Å–ø–∏—Å–∫–∏ –∫ —É–¥–∞–ª–µ–Ω–∏—é (–Ω–µ —É–¥–∞–ª—è–µ–º —Ç–æ, —á—Ç–æ —Ä–µ—à–µ–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å)
    const finalDelete = [...deleteSet].filter(fp => !keepSet.has(fp));

    // –£–¥–∞–ª–µ–Ω–∏–µ
    let removed = 0;
    const removedLog = [];
    for (const rel of finalDelete) {
        const abs = path.join(assetsDir, rel);
        if (safeUnlink(abs)) {
            removed++;
            removedLog.push(rel);
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: —Ñ–∏–ª—å—Ç—Ä—É–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ
    const keptImages = images.filter(i => !finalDelete.includes(i.filePath));
    const newMetadata = {
        ...metadata,
        totalDownloaded: keptImages.length,
        images: keptImages
    };
    fs.writeFileSync(metadataPath, JSON.stringify(newMetadata, null, 2), 'utf8');

    // –°–≤–æ–¥–∫–∞
    const summaryPath = path.join(assetsDir, 'cleanup-report.md');
    const summary = `# –û—Ç—á—ë—Ç –æ—á–∏—Å—Ç–∫–∏ –∞—Å—Å–µ—Ç–æ–≤\n\n–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${removed}\n–û—Å—Ç–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${keptImages.length}\n\n## –£–¥–∞–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n${removedLog.map(p => `- ${p}`).join('\n')}`;
    fs.writeFileSync(summaryPath, summary, 'utf8');

    console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ: ${removed}. –û—Ç—á—ë—Ç: ${summaryPath}`);
}

main().catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', err);
    process.exit(1);
});
